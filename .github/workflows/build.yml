name: Test con Docker

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Dar permisos de ejecución a Gradlew
        run: chmod +x ./gradlew

      - name: Ejecutar Checkstyle
        run: ./gradlew :app:check



  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Construir la imagen de Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: my-java-app:latest

      - name: Ejecutar tests dentro del contenedor
        run:  |
          mkdir -p app/build/reports
          mkdir -p app/build/test-results
          docker run --rm \
            -v ${{ github.workspace }}/app/build/reports:/app/app/build/reports \
            -v ${{ github.workspace }}/app/build/test-results:/app/app/build/test-results \
            my-java-app:latest ./gradlew :app:test --no-daemon
          echo "--- Contenido del Reporte HTML ---"
          ls -R app/build/reports
          echo "--- Contenido de los Resultados XML ---"
          ls -R app/build/test-results

      # Subir reportes como artefacto descargable
      - name: Subir reporte HTML de tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-test-report
          path: app/build/reports/tests/test/

      - name: Subir resultados XML de tests
        uses: actions/upload-artifact@v4
        with:
          name: xml-test-results
          path: app/build/test-results/test/



  coverage-check:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    needs: [ build-and-test ]
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Dar permisos de ejecución a Gradlew
        run: chmod +x ./gradlew

      - name: Generar reporte de cobertura con JaCoCo
        run: ./gradlew :app:test :app:jacocoTestReport

      - name: Extraer el porcentaje de cobertura total (versión precisa)
        id: jacoco
        run: |
          # Este comando awk lee todo el archivo y se queda con los valores de la ÚLTIMA LÍNEA
          # que coincide con el contador de INSTRUCCIONES, que es el resumen total.
          # También maneja internamente el caso de división por cero.
          percentage=$(awk -F'"' '/<counter type="INSTRUCTION"/{ missed=$4; covered=$6 } END { total=missed+covered; if(total>0){pct=covered*100/total} else {pct=0}; print int(pct) }' app/build/reports/jacoco/test/jacocoTestReport.xml)
          
          echo "Total Coverage Percentage: $percentage%"
          echo "coverage_percentage=$percentage" >> $GITHUB_OUTPUT

      - name: Validar umbral de cobertura (mínimo 80%)
        run: |
          threshold=80
          coverage=${{ steps.jacoco.outputs.coverage_percentage }}
          
          echo "El umbral requerido es ${threshold}%."
          echo "La cobertura actual es ${coverage}%."
          
          if (( coverage < threshold )); then
            echo "Error: La cobertura de código de ${coverage}% está por debajo del umbral requerido de ${threshold}%."
            exit 1
          else
            echo "Éxito: La cobertura de código cumple con el umbral."
          fi

      - name: Subir reporte de cobertura de JaCoCo
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-coverage-report
          path: app/build/reports/jacoco/